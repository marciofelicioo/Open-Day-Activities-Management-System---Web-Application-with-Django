from django.test import TestCase
from django.test import SimpleTestCase
from django.urls import resolve,reverse
from configuracao import views

#Create your tests here.
class TestUrls(TestCase):
    
    def test_url_is_resolved(self):
        url = reverse('configuracao:diasAbertos')
        self.assertEquals(resolve(url).func.__name__, views.viewDays.__name__)
        url = reverse('configuracao:editarDia', kwargs={'id':1})
        self.assertEquals(resolve(url).func, views.newDay)
        url = reverse('configuracao:novoDia')
        self.assertEquals(resolve(url).func, views.newDay)
        url = reverse('configuracao:eliminarDia', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.delDay)
        url = reverse('configuracao:verMenus')
        self.assertEquals(resolve(url).func.__name__, views.verMenus.__name__)
        url = reverse('configuracao:eliminarMenu', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.delMenu)
        url = reverse('configuracao:editarMenu', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.newMenu)
        url = reverse('configuracao:novoMenu')
        self.assertEquals(resolve(url).func, views.newMenu)
        url = reverse('configuracao:verTransportes')
        self.assertEquals(resolve(url).func.__name__, views.verTransportes.__name__)
        url = reverse('configuracao:criarTransporte')
        self.assertEquals(resolve(url).func, views.criarTransporte)
        url = reverse('configuracao:editarTransporte', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.criarTransporte)
        url = reverse('configuracao:atribuirTransporte', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.atribuirTransporte)
        url = reverse('configuracao:eliminarAtribuicao', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.eliminarAtribuicao)
        url = reverse('configuracao:eliminarTransporte', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.eliminarTransporte)
        url = reverse('configuracao:verEdificioImagem', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.verEdificioImagem)
        url = reverse('configuracao:verEdificios')
        self.assertEquals(resolve(url).func.__name__, views.verEdificios.__name__)
        url = reverse('configuracao:adicionarEdificio')
        self.assertEquals(resolve(url).func, views.configurarEdificio)
        url = reverse('configuracao:editarEdificio', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.configurarEdificio)
        url = reverse('configuracao:eliminarEdificio', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.eliminarEdificio)
        url = reverse('configuracao:verUOs')
        self.assertEquals(resolve(url).func.__name__, views.verUOs.__name__)
        url = reverse('configuracao:adicionarUO')
        self.assertEquals(resolve(url).func, views.configurarUO)
        url = reverse('configuracao:editarUO', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.configurarUO)
        url = reverse('configuracao:eliminarUO', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.eliminarUO)
        url = reverse('configuracao:verTemas')
        self.assertEquals(resolve(url).func.__name__, views.verTemas.__name__)
        url = reverse('configuracao:adicionarTema')
        self.assertEquals(resolve(url).func, views.configurarTema)
        url = reverse('configuracao:editarTema', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.configurarTema)
        url = reverse('configuracao:eliminarTema', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.eliminarTema)
        url = reverse('configuracao:verDepartamentos')
        self.assertEquals(resolve(url).func.__name__, views.verDepartamentos.__name__)
        url = reverse('configuracao:adicionarDepartamento')
        self.assertEquals(resolve(url).func, views.configurarDepartamento)
        url = reverse('configuracao:editarDepartamento', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.configurarDepartamento)
        url = reverse('configuracao:eliminarDepartamento', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.eliminarDepartamento)
        url = reverse('configuracao:verCursos')
        self.assertEquals(resolve(url).func.__name__, views.verCursos.__name__)
        url = reverse('configuracao:adicionarCurso')
        self.assertEquals(resolve(url).func, views.configurarCurso)
        url = reverse('configuracao:editarCurso', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.configurarCurso)
        url = reverse('configuracao:eliminarCurso', kwargs={'id':10})
        self.assertEquals(resolve(url).func, views.eliminarCurso)
        url = reverse('configuracao:getDias')
        self.assertEquals(resolve(url).func, views.getDias)
        url = reverse('configuracao:ajaxAddHorarioRow')
        self.assertEquals(resolve(url).func, views.newHorarioRow)
        url = reverse('configuracao:ajaxAddPratoRow')
        self.assertEquals(resolve(url).func, views.newPratoRow)
        url = reverse('configuracao:ajaxAddEspacoRow')
        self.assertEquals(resolve(url).func, views.newEspacoRow)
        url = reverse('configuracao:ajaxAddUORow')
        self.assertEquals(resolve(url).func, views.newUORow)
        url = reverse('configuracao:ajaxAddDepartamentoRow')
        self.assertEquals(resolve(url).func, views.newDepartamentoRow)
        url = reverse('configuracao:ajaxAddCursoRow')
        self.assertEquals(resolve(url).func, views.newCursoRow)